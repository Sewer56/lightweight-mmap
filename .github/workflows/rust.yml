name: Test, Upload Coverage and Release Rust

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  build-with-pgo: false

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          # Linux Targets (Ubuntu)
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-pgo: true, use-cross: false, features: "std mmap" }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-pgo: true, use-cross: false, features: "std mmap no-format" }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-pgo: true, use-cross: false, features: "std mmap no-format trim-file-lengths" }
          
          - { os: ubuntu-latest, target: i686-unknown-linux-gnu, use-pgo: true, use-cross: false, features: "std mmap" }
          - { os: ubuntu-latest, target: i686-unknown-linux-gnu, use-pgo: true, use-cross: false, features: "std mmap no-format" }
          - { os: ubuntu-latest, target: i686-unknown-linux-gnu, use-pgo: true, use-cross: false, features: "std mmap no-format trim-file-lengths" }
          
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-pgo: false, use-cross: true, features: "std mmap" }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-pgo: false, use-cross: true, features: "std mmap no-format" }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-pgo: false, use-cross: true, features: "std mmap no-format trim-file-lengths" }
          
          - { os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf, use-pgo: false, use-cross: true, features: "std mmap" }
          - { os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf, use-pgo: false, use-cross: true, features: "std mmap no-format" }
          - { os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf, use-pgo: false, use-cross: true, features: "std mmap no-format trim-file-lengths" }

          # Windows Targets
          - { os: windows-latest, target: x86_64-pc-windows-msvc, use-pgo: true, use-cross: false, features: "std mmap" }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, use-pgo: true, use-cross: false, features: "std mmap no-format" }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, use-pgo: true, use-cross: false, features: "std mmap no-format trim-file-lengths" }
          
          - { os: windows-latest, target: i686-pc-windows-msvc, use-pgo: true, use-cross: false, features: "std mmap" }
          - { os: windows-latest, target: i686-pc-windows-msvc, use-pgo: true, use-cross: false, features: "std mmap no-format" }
          - { os: windows-latest, target: i686-pc-windows-msvc, use-pgo: true, use-cross: false, features: "std mmap no-format trim-file-lengths" }
          # aarch64 is disabled; because there is no native runner

          # macOS Targets
          - { os: macos-13, target: x86_64-apple-darwin, use-pgo: true, use-cross: false, features: "std mmap" }
          - { os: macos-13, target: x86_64-apple-darwin, use-pgo: true, use-cross: false, features: "std mmap no-format" }
          - { os: macos-13, target: x86_64-apple-darwin, use-pgo: true, use-cross: false, features: "std mmap no-format trim-file-lengths" }
          
          - { os: macos-14, target: aarch64-apple-darwin, use-pgo: true, use-cross: false, features: "std mmap" }
          - { os: macos-14, target: aarch64-apple-darwin, use-pgo: true, use-cross: false, features: "std mmap no-format" }
          - { os: macos-14, target: aarch64-apple-darwin, use-pgo: true, use-cross: false, features: "std mmap no-format trim-file-lengths" }

          # Android Targets (Cross-compiled on Ubuntu)
          - { os: ubuntu-latest, target: x86_64-linux-android, use-pgo: false, use-cross: true, features: "std mmap" }
          - { os: ubuntu-latest, target: x86_64-linux-android, use-pgo: false, use-cross: true, features: "std mmap no-format" }
          - { os: ubuntu-latest, target: x86_64-linux-android, use-pgo: false, use-cross: true, features: "std mmap no-format trim-file-lengths" }
          
          - { os: ubuntu-latest, target: i686-linux-android, use-pgo: false, use-cross: true, features: "std mmap" }
          - { os: ubuntu-latest, target: i686-linux-android, use-pgo: false, use-cross: true, features: "std mmap no-format" }
          - { os: ubuntu-latest, target: i686-linux-android, use-pgo: false, use-cross: true, features: "std mmap no-format trim-file-lengths" }

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build Libraries and Run Tests
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        with:
          upload-coverage: true
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          target: ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}
          features: ${{ matrix.features }}

      - name: Run cargo-semver-checks
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          SEARCH_RESULT=$(cargo search "^lightweight-mmap$" --limit 1)

          if echo "$SEARCH_RESULT" | grep -q "^lightweight-mmap "; then
            rustup target add ${{ matrix.target }}
            cargo install cargo-semver-checks
            ## Replace spaces with commas.
            cargo semver-checks --target ${{ matrix.target }} --features "$(echo "${{ matrix.features }}" | tr ' ' ',')"
          else
            echo "No previous version found on crates.io. Skipping semver checks."
          fi

  test-on-wine:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-gnu, i686-pc-windows-gnu]
    steps:
      - uses: actions/checkout@v4

      - name: Run Tests and Coverage on WINE
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        with:
          rust-toolchain: nightly
          target: ${{ matrix.target }}
          install-rust-toolchain: true
          setup-rust-cache: true
          upload-coverage: true
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          use-cross: true

  publish-crate:
    permissions:
      contents: write
    needs: [build-and-test, test-on-wine]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Publish Rust Crate and Artifacts  
        uses: Reloaded-Project/devops-publish-action@v1
        with:
          crates-io-token: ${{ secrets.CRATES_IO_TOKEN }}
          rust-project-paths: |
            .
